<launch>

<arg name="debug"
     value="$(optenv SELFIE_DEBUG false)" />
<arg name="config_default"
     value="$(optenv SELFIE_DEFAULT false)" />

<group unless="$(arg config_default)">
    <rosparam command="load"
        file="$(find startup)/config/sim/control.yaml"  />
    <rosparam command="load"
        file="$(find startup)/config/sim/hardware.yaml"  />
    <rosparam command="load"
        file="$(find startup)/config/sim/navigation.yaml"  />
    <rosparam command="load"
        file="$(find startup)/config/sim/perception.yaml"  />
    <rosparam command="load"
        file="$(find startup)/config/sim/tasks.yaml"  />
</group>

<!-- Control -->
    <!-- drive_multiplexer -->
    <include file="$(find drive_multiplexer)/launch/drive_multiplexer_example.launch" >
        <arg name="debug" 
             value="$(arg debug)" />
        <arg name="load_config" 
             value="$(arg config_default)" />
    </include>

    <!-- pid_carrot_follower -->
    <include file="$(find pid_carrot_follower)/launch/pid_carrot_follower_example.launch" >
        <arg name="debug" 
             value="$(arg debug)" />
        <arg name="load_config" 
             value="$(arg config_default)" />
    </include>

<!-- Navigation -->
    <!-- lane_pilot -->
    <include file="$(find lane_pilot)/launch/lane_pilot_example.launch" >
        <arg name="debug" 
             value="$(arg debug)" />
        <arg name="load_config" 
             value="$(arg config_default)" />
    </include>

    <!-- path_generator -->
    <include file="$(find path_generator)/launch/path_generator_example.launch" >
        <arg name="debug" 
             value="$(arg debug)" />
        <arg name="load_config" 
             value="$(arg config_default)" />
    </include>

<!-- Perception -->
    <!-- lane_detector -->
    <include file="$(find lane_detector)/launch/lane_detector_example.launch" >
        <arg name="debug" 
             value="$(arg debug)" />
        <arg name="load_config" 
             value="$(arg config_default)" />
        <arg name="homography_file" 
             value="/home/$(env USER)/.ros/homography_sim.yaml" />
    </include>

    <!-- obstacle_detector -->
    <include file="$(find obstacle_detector)/launch/obstacle_detector_example.launch" >
        <arg name="debug" 
             value="$(arg debug)" />
        <arg name="load_config" 
             value="$(arg config_default)" />
    </include>

    <!-- odometry -->
    <include file="$(find odometry)/launch/odometry_example.launch" >
        <arg name="debug" 
             value="$(arg debug)" />
        <arg name="load_config" 
             value="$(arg config_default)" />
    </include>

<!-- Tasks -->
    <!-- free_drive -->
    <include file="$(find free_drive)/launch/free_drive_example.launch" >
        <arg name="debug" 
             value="$(arg debug)" />
        <arg name="load_config" 
             value="$(arg config_default)" />
    </include>

    <!-- intersection -->
    <include file="$(find intersection)/launch/intersection_example.launch" >
        <arg name="debug" 
             value="$(arg debug)" />
        <arg name="load_config" 
             value="$(arg config_default)" />
    </include>

    <!-- park -->
    <include file="$(find park)/launch/park_example.launch" >
        <arg name="debug" 
             value="$(arg debug)" />
        <arg name="load_config" 
             value="$(arg config_default)" />
    </include>

    <!-- parking_spot_detector -->
    <include file="$(find parking_spot_detector)/launch/detect_parking_spot_example.launch" >
        <arg name="debug" 
             value="$(arg debug)" />
        <arg name="load_config" 
             value="$(arg config_default)" />
    </include>

    <!-- scheduler -->
    <include file="$(find scheduler)/launch/scheduler_example.launch" >
        <arg name="debug" 
             value="$(arg debug)" />
        <arg name="load_config" 
             value="$(arg config_default)" />
    </include>

    <!-- starting_procedure -->
    <include file="$(find starting_procedure)/launch/starting_procedure_example.launch" >
        <arg name="debug" 
             value="$(arg debug)" />
        <arg name="load_config" 
             value="$(arg config_default)" />
    </include>

<!-- Startup -->
    <!-- transforms -->
    <node pkg="tf" type="static_transform_publisher" name="tf_base2laser"           args="0.3 0 0 0 0 0 base_link laser           10"/>
    <node pkg="tf" type="static_transform_publisher" name="tf_base2imu"             args="0   0 0 0 0 0 base_link imu             10"/>
    <node pkg="tf" type="static_transform_publisher" name="tf_base2road_markings"   args="0   0 0 0 0 0 base_link road_markings   10"/>

    <!-- diagnostics -->

</launch>